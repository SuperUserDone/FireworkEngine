// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: image.capnp

#include "image.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<105> b_99493c8593497f2c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     44, 127,  73, 147, 133,  60,  73, 153,
     12,   0,   0,   0,   1,   0,   1,   0,
    147, 226, 189, 131,  78, 253,   2, 239,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 109,  97, 103, 101,  46,  99,  97,
    112, 110, 112,  58,  73, 109,  97, 103,
    101,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    245, 131, 108, 131, 161,  49,   0, 206,
      9,   0,   0,   0,  98,   0,   0,   0,
    106, 229, 255, 203, 167, 153, 195, 183,
      9,   0,   0,   0,  98,   0,   0,   0,
     67, 111, 108, 111, 114,  70, 111, 114,
    109,  97, 116,   0,   0,   0,   0,   0,
     67, 111, 109, 112, 114, 101, 115, 115,
    105, 111, 110,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    237, 101,  53,  96, 138, 156,  77, 201,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 112, 114, 101, 115, 115,
    101, 100,  68,  97, 116,  97,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 108, 111, 114,  70, 111, 114,
    109,  97, 116,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    245, 131, 108, 131, 161,  49,   0, 206,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 112, 114, 101, 115, 115,
    105, 111, 110,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    106, 229, 255, 203, 167, 153, 195, 183,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 112, 114, 101, 115, 115,
    101, 100,  68,  97, 116,  97,  68, 105,
     99, 116,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_99493c8593497f2c = b_99493c8593497f2c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_99493c8593497f2c[] = {
  &s_b7c399a7cbffe56a,
  &s_c94d9c8a603565ed,
  &s_ce0031a1836c83f5,
};
static const uint16_t m_99493c8593497f2c[] = {2, 1, 4, 3, 0};
static const uint16_t i_99493c8593497f2c[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_99493c8593497f2c = {
  0x99493c8593497f2c, b_99493c8593497f2c.words, 105, d_99493c8593497f2c, m_99493c8593497f2c,
  3, 5, i_99493c8593497f2c, nullptr, nullptr, { &s_99493c8593497f2c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ce0031a1836c83f5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    245, 131, 108, 131, 161,  49,   0, 206,
     18,   0,   0,   0,   2,   0,   0,   0,
     44, 127,  73, 147, 133,  60,  73, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 109,  97, 103, 101,  46,  99,  97,
    112, 110, 112,  58,  73, 109,  97, 103,
    101,  46,  67, 111, 108, 111, 114,  70,
    111, 114, 109,  97, 116,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 114, 109,  97, 116,  82,   0,
    102, 111, 114, 109,  97, 116,  82, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 114, 109,  97, 116,  82, 103,
     98,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 114, 109,  97, 116,  82, 103,
     98,  97,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ce0031a1836c83f5 = b_ce0031a1836c83f5.words;
#if !CAPNP_LITE
static const uint16_t m_ce0031a1836c83f5[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_ce0031a1836c83f5 = {
  0xce0031a1836c83f5, b_ce0031a1836c83f5.words, 37, nullptr, m_ce0031a1836c83f5,
  0, 4, nullptr, nullptr, nullptr, { &s_ce0031a1836c83f5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(ColorFormat_ce0031a1836c83f5, ce0031a1836c83f5);
static const ::capnp::_::AlignedData<28> b_b7c399a7cbffe56a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    106, 229, 255, 203, 167, 153, 195, 183,
     18,   0,   0,   0,   2,   0,   0,   0,
     44, 127,  73, 147, 133,  60,  73, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 109,  97, 103, 101,  46,  99,  97,
    112, 110, 112,  58,  73, 109,  97, 103,
    101,  46,  67, 111, 109, 112, 114, 101,
    115, 115, 105, 111, 110,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 112,  78, 111, 110, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 112,  90, 115, 116, 100,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b7c399a7cbffe56a = b_b7c399a7cbffe56a.words;
#if !CAPNP_LITE
static const uint16_t m_b7c399a7cbffe56a[] = {0, 1};
const ::capnp::_::RawSchema s_b7c399a7cbffe56a = {
  0xb7c399a7cbffe56a, b_b7c399a7cbffe56a.words, 28, nullptr, m_b7c399a7cbffe56a,
  0, 2, nullptr, nullptr, nullptr, { &s_b7c399a7cbffe56a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Compression_b7c399a7cbffe56a, b7c399a7cbffe56a);
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace fw {
namespace capnp {

// Image
constexpr uint16_t Image::_capnpPrivate::dataWordSize;
constexpr uint16_t Image::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Image::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Image::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

