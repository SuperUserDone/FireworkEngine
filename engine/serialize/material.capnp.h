// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: material.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "vector.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(bd8c8b89aec5a9bf);
CAPNP_DECLARE_SCHEMA(b9a2b0447b6ca8c0);
CAPNP_DECLARE_SCHEMA(c9cb9a6165050119);

}  // namespace schemas
}  // namespace capnp

namespace fw {
namespace capnp {

struct Attribute {
  Attribute() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Data;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd8c8b89aec5a9bf, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Attribute::Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INT32,
    UINT32,
    FLOAT,
    DOUBLE,
    TEXTURE,
    VEC2F,
    VEC2I,
    VEC2U,
    VEC3F,
    VEC3I,
    VEC3U,
    VEC4F,
    VEC4I,
    VEC4U,
    BOOL,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9a2b0447b6ca8c0, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Material {
  Material() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c9cb9a6165050119, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Attribute::Reader {
public:
  typedef Attribute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBindId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline typename Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Attribute::Builder {
public:
  typedef Attribute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBindId();
  inline void setBindId( ::uint32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline typename Data::Builder getData();
  inline typename Data::Builder initData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Attribute::Pipeline {
public:
  typedef Attribute Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Data::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Attribute::Data::Reader {
public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt32() const;
  inline  ::int64_t getInt32() const;

  inline bool isUint32() const;
  inline  ::uint64_t getUint32() const;

  inline bool isFloat() const;
  inline float getFloat() const;

  inline bool isDouble() const;
  inline double getDouble() const;

  inline bool isTexture() const;
  inline bool hasTexture() const;
  inline  ::capnp::Text::Reader getTexture() const;

  inline bool isVec2f() const;
  inline bool hasVec2f() const;
  inline  ::fw::capnp::Vec2f::Reader getVec2f() const;

  inline bool isVec2i() const;
  inline bool hasVec2i() const;
  inline  ::fw::capnp::Vec2i::Reader getVec2i() const;

  inline bool isVec2u() const;
  inline bool hasVec2u() const;
  inline  ::fw::capnp::Vec2u::Reader getVec2u() const;

  inline bool isVec3f() const;
  inline bool hasVec3f() const;
  inline  ::fw::capnp::Vec3f::Reader getVec3f() const;

  inline bool isVec3i() const;
  inline bool hasVec3i() const;
  inline  ::fw::capnp::Vec3i::Reader getVec3i() const;

  inline bool isVec3u() const;
  inline bool hasVec3u() const;
  inline  ::fw::capnp::Vec3u::Reader getVec3u() const;

  inline bool isVec4f() const;
  inline bool hasVec4f() const;
  inline  ::fw::capnp::Vec4f::Reader getVec4f() const;

  inline bool isVec4i() const;
  inline bool hasVec4i() const;
  inline  ::fw::capnp::Vec4i::Reader getVec4i() const;

  inline bool isVec4u() const;
  inline bool hasVec4u() const;
  inline  ::fw::capnp::Vec4u::Reader getVec4u() const;

  inline bool isBool() const;
  inline bool getBool() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Attribute::Data::Builder {
public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt32();
  inline  ::int64_t getInt32();
  inline void setInt32( ::int64_t value);

  inline bool isUint32();
  inline  ::uint64_t getUint32();
  inline void setUint32( ::uint64_t value);

  inline bool isFloat();
  inline float getFloat();
  inline void setFloat(float value);

  inline bool isDouble();
  inline double getDouble();
  inline void setDouble(double value);

  inline bool isTexture();
  inline bool hasTexture();
  inline  ::capnp::Text::Builder getTexture();
  inline void setTexture( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTexture(unsigned int size);
  inline void adoptTexture(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTexture();

  inline bool isVec2f();
  inline bool hasVec2f();
  inline  ::fw::capnp::Vec2f::Builder getVec2f();
  inline void setVec2f( ::fw::capnp::Vec2f::Reader value);
  inline  ::fw::capnp::Vec2f::Builder initVec2f();
  inline void adoptVec2f(::capnp::Orphan< ::fw::capnp::Vec2f>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec2f> disownVec2f();

  inline bool isVec2i();
  inline bool hasVec2i();
  inline  ::fw::capnp::Vec2i::Builder getVec2i();
  inline void setVec2i( ::fw::capnp::Vec2i::Reader value);
  inline  ::fw::capnp::Vec2i::Builder initVec2i();
  inline void adoptVec2i(::capnp::Orphan< ::fw::capnp::Vec2i>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec2i> disownVec2i();

  inline bool isVec2u();
  inline bool hasVec2u();
  inline  ::fw::capnp::Vec2u::Builder getVec2u();
  inline void setVec2u( ::fw::capnp::Vec2u::Reader value);
  inline  ::fw::capnp::Vec2u::Builder initVec2u();
  inline void adoptVec2u(::capnp::Orphan< ::fw::capnp::Vec2u>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec2u> disownVec2u();

  inline bool isVec3f();
  inline bool hasVec3f();
  inline  ::fw::capnp::Vec3f::Builder getVec3f();
  inline void setVec3f( ::fw::capnp::Vec3f::Reader value);
  inline  ::fw::capnp::Vec3f::Builder initVec3f();
  inline void adoptVec3f(::capnp::Orphan< ::fw::capnp::Vec3f>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec3f> disownVec3f();

  inline bool isVec3i();
  inline bool hasVec3i();
  inline  ::fw::capnp::Vec3i::Builder getVec3i();
  inline void setVec3i( ::fw::capnp::Vec3i::Reader value);
  inline  ::fw::capnp::Vec3i::Builder initVec3i();
  inline void adoptVec3i(::capnp::Orphan< ::fw::capnp::Vec3i>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec3i> disownVec3i();

  inline bool isVec3u();
  inline bool hasVec3u();
  inline  ::fw::capnp::Vec3u::Builder getVec3u();
  inline void setVec3u( ::fw::capnp::Vec3u::Reader value);
  inline  ::fw::capnp::Vec3u::Builder initVec3u();
  inline void adoptVec3u(::capnp::Orphan< ::fw::capnp::Vec3u>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec3u> disownVec3u();

  inline bool isVec4f();
  inline bool hasVec4f();
  inline  ::fw::capnp::Vec4f::Builder getVec4f();
  inline void setVec4f( ::fw::capnp::Vec4f::Reader value);
  inline  ::fw::capnp::Vec4f::Builder initVec4f();
  inline void adoptVec4f(::capnp::Orphan< ::fw::capnp::Vec4f>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec4f> disownVec4f();

  inline bool isVec4i();
  inline bool hasVec4i();
  inline  ::fw::capnp::Vec4i::Builder getVec4i();
  inline void setVec4i( ::fw::capnp::Vec4i::Reader value);
  inline  ::fw::capnp::Vec4i::Builder initVec4i();
  inline void adoptVec4i(::capnp::Orphan< ::fw::capnp::Vec4i>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec4i> disownVec4i();

  inline bool isVec4u();
  inline bool hasVec4u();
  inline  ::fw::capnp::Vec4u::Builder getVec4u();
  inline void setVec4u( ::fw::capnp::Vec4u::Reader value);
  inline  ::fw::capnp::Vec4u::Builder initVec4u();
  inline void adoptVec4u(::capnp::Orphan< ::fw::capnp::Vec4u>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec4u> disownVec4u();

  inline bool isBool();
  inline bool getBool();
  inline void setBool(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Attribute::Data::Pipeline {
public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Material::Reader {
public:
  typedef Material Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAttributes() const;
  inline  ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>::Reader getAttributes() const;

  inline bool hasShaderRef() const;
  inline  ::capnp::Text::Reader getShaderRef() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Material::Builder {
public:
  typedef Material Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAttributes();
  inline  ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>::Builder getAttributes();
  inline void setAttributes( ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>> disownAttributes();

  inline bool hasShaderRef();
  inline  ::capnp::Text::Builder getShaderRef();
  inline void setShaderRef( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initShaderRef(unsigned int size);
  inline void adoptShaderRef(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownShaderRef();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Material::Pipeline {
public:
  typedef Material Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t Attribute::Reader::getBindId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Attribute::Builder::getBindId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setBindId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Attribute::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Attribute::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Attribute::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Attribute::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Attribute::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Attribute::Data::Reader Attribute::Reader::getData() const {
  return typename Attribute::Data::Reader(_reader);
}
inline typename Attribute::Data::Builder Attribute::Builder::getData() {
  return typename Attribute::Data::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Attribute::Data::Pipeline Attribute::Pipeline::getData() {
  return typename Attribute::Data::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Attribute::Data::Builder Attribute::Builder::initData() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Attribute::Data::Builder(_builder);
}
inline  ::fw::capnp::Attribute::Data::Which Attribute::Data::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline  ::fw::capnp::Attribute::Data::Which Attribute::Data::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Attribute::Data::Reader::isInt32() const {
  return which() == Attribute::Data::INT32;
}
inline bool Attribute::Data::Builder::isInt32() {
  return which() == Attribute::Data::INT32;
}
inline  ::int64_t Attribute::Data::Reader::getInt32() const {
  KJ_IREQUIRE((which() == Attribute::Data::INT32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Attribute::Data::Builder::getInt32() {
  KJ_IREQUIRE((which() == Attribute::Data::INT32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Attribute::Data::Builder::setInt32( ::int64_t value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::INT32);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Data::Reader::isUint32() const {
  return which() == Attribute::Data::UINT32;
}
inline bool Attribute::Data::Builder::isUint32() {
  return which() == Attribute::Data::UINT32;
}
inline  ::uint64_t Attribute::Data::Reader::getUint32() const {
  KJ_IREQUIRE((which() == Attribute::Data::UINT32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Attribute::Data::Builder::getUint32() {
  KJ_IREQUIRE((which() == Attribute::Data::UINT32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Attribute::Data::Builder::setUint32( ::uint64_t value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::UINT32);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Data::Reader::isFloat() const {
  return which() == Attribute::Data::FLOAT;
}
inline bool Attribute::Data::Builder::isFloat() {
  return which() == Attribute::Data::FLOAT;
}
inline float Attribute::Data::Reader::getFloat() const {
  KJ_IREQUIRE((which() == Attribute::Data::FLOAT),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Attribute::Data::Builder::getFloat() {
  KJ_IREQUIRE((which() == Attribute::Data::FLOAT),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Attribute::Data::Builder::setFloat(float value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::FLOAT);
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Data::Reader::isDouble() const {
  return which() == Attribute::Data::DOUBLE;
}
inline bool Attribute::Data::Builder::isDouble() {
  return which() == Attribute::Data::DOUBLE;
}
inline double Attribute::Data::Reader::getDouble() const {
  KJ_IREQUIRE((which() == Attribute::Data::DOUBLE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Attribute::Data::Builder::getDouble() {
  KJ_IREQUIRE((which() == Attribute::Data::DOUBLE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Attribute::Data::Builder::setDouble(double value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::DOUBLE);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Data::Reader::isTexture() const {
  return which() == Attribute::Data::TEXTURE;
}
inline bool Attribute::Data::Builder::isTexture() {
  return which() == Attribute::Data::TEXTURE;
}
inline bool Attribute::Data::Reader::hasTexture() const {
  if (which() != Attribute::Data::TEXTURE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasTexture() {
  if (which() != Attribute::Data::TEXTURE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Attribute::Data::Reader::getTexture() const {
  KJ_IREQUIRE((which() == Attribute::Data::TEXTURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Attribute::Data::Builder::getTexture() {
  KJ_IREQUIRE((which() == Attribute::Data::TEXTURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setTexture( ::capnp::Text::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::TEXTURE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Attribute::Data::Builder::initTexture(unsigned int size) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::TEXTURE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Attribute::Data::Builder::adoptTexture(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::TEXTURE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Attribute::Data::Builder::disownTexture() {
  KJ_IREQUIRE((which() == Attribute::Data::TEXTURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec2f() const {
  return which() == Attribute::Data::VEC2F;
}
inline bool Attribute::Data::Builder::isVec2f() {
  return which() == Attribute::Data::VEC2F;
}
inline bool Attribute::Data::Reader::hasVec2f() const {
  if (which() != Attribute::Data::VEC2F) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec2f() {
  if (which() != Attribute::Data::VEC2F) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec2f::Reader Attribute::Data::Reader::getVec2f() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec2f::Builder Attribute::Data::Builder::getVec2f() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec2f( ::fw::capnp::Vec2f::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2F);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec2f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec2f::Builder Attribute::Data::Builder::initVec2f() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2F);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec2f(
    ::capnp::Orphan< ::fw::capnp::Vec2f>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2F);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec2f> Attribute::Data::Builder::disownVec2f() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec2i() const {
  return which() == Attribute::Data::VEC2I;
}
inline bool Attribute::Data::Builder::isVec2i() {
  return which() == Attribute::Data::VEC2I;
}
inline bool Attribute::Data::Reader::hasVec2i() const {
  if (which() != Attribute::Data::VEC2I) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec2i() {
  if (which() != Attribute::Data::VEC2I) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec2i::Reader Attribute::Data::Reader::getVec2i() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2i>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec2i::Builder Attribute::Data::Builder::getVec2i() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2i>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec2i( ::fw::capnp::Vec2i::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2I);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec2i>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec2i::Builder Attribute::Data::Builder::initVec2i() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2I);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2i>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec2i(
    ::capnp::Orphan< ::fw::capnp::Vec2i>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2I);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec2i>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec2i> Attribute::Data::Builder::disownVec2i() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2i>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec2u() const {
  return which() == Attribute::Data::VEC2U;
}
inline bool Attribute::Data::Builder::isVec2u() {
  return which() == Attribute::Data::VEC2U;
}
inline bool Attribute::Data::Reader::hasVec2u() const {
  if (which() != Attribute::Data::VEC2U) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec2u() {
  if (which() != Attribute::Data::VEC2U) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec2u::Reader Attribute::Data::Reader::getVec2u() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec2u::Builder Attribute::Data::Builder::getVec2u() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec2u( ::fw::capnp::Vec2u::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2U);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec2u::Builder Attribute::Data::Builder::initVec2u() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2U);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec2u(
    ::capnp::Orphan< ::fw::capnp::Vec2u>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC2U);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec2u> Attribute::Data::Builder::disownVec2u() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC2U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec3f() const {
  return which() == Attribute::Data::VEC3F;
}
inline bool Attribute::Data::Builder::isVec3f() {
  return which() == Attribute::Data::VEC3F;
}
inline bool Attribute::Data::Reader::hasVec3f() const {
  if (which() != Attribute::Data::VEC3F) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec3f() {
  if (which() != Attribute::Data::VEC3F) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec3f::Reader Attribute::Data::Reader::getVec3f() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec3f::Builder Attribute::Data::Builder::getVec3f() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec3f( ::fw::capnp::Vec3f::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3F);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec3f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec3f::Builder Attribute::Data::Builder::initVec3f() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3F);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec3f(
    ::capnp::Orphan< ::fw::capnp::Vec3f>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3F);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec3f> Attribute::Data::Builder::disownVec3f() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec3i() const {
  return which() == Attribute::Data::VEC3I;
}
inline bool Attribute::Data::Builder::isVec3i() {
  return which() == Attribute::Data::VEC3I;
}
inline bool Attribute::Data::Reader::hasVec3i() const {
  if (which() != Attribute::Data::VEC3I) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec3i() {
  if (which() != Attribute::Data::VEC3I) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec3i::Reader Attribute::Data::Reader::getVec3i() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3i>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec3i::Builder Attribute::Data::Builder::getVec3i() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3i>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec3i( ::fw::capnp::Vec3i::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3I);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec3i>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec3i::Builder Attribute::Data::Builder::initVec3i() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3I);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3i>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec3i(
    ::capnp::Orphan< ::fw::capnp::Vec3i>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3I);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec3i>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec3i> Attribute::Data::Builder::disownVec3i() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3i>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec3u() const {
  return which() == Attribute::Data::VEC3U;
}
inline bool Attribute::Data::Builder::isVec3u() {
  return which() == Attribute::Data::VEC3U;
}
inline bool Attribute::Data::Reader::hasVec3u() const {
  if (which() != Attribute::Data::VEC3U) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec3u() {
  if (which() != Attribute::Data::VEC3U) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec3u::Reader Attribute::Data::Reader::getVec3u() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3u>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec3u::Builder Attribute::Data::Builder::getVec3u() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3u>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec3u( ::fw::capnp::Vec3u::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3U);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec3u>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec3u::Builder Attribute::Data::Builder::initVec3u() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3U);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3u>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec3u(
    ::capnp::Orphan< ::fw::capnp::Vec3u>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC3U);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec3u>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec3u> Attribute::Data::Builder::disownVec3u() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC3U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec3u>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec4f() const {
  return which() == Attribute::Data::VEC4F;
}
inline bool Attribute::Data::Builder::isVec4f() {
  return which() == Attribute::Data::VEC4F;
}
inline bool Attribute::Data::Reader::hasVec4f() const {
  if (which() != Attribute::Data::VEC4F) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec4f() {
  if (which() != Attribute::Data::VEC4F) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec4f::Reader Attribute::Data::Reader::getVec4f() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec4f::Builder Attribute::Data::Builder::getVec4f() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec4f( ::fw::capnp::Vec4f::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4F);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec4f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec4f::Builder Attribute::Data::Builder::initVec4f() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4F);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec4f(
    ::capnp::Orphan< ::fw::capnp::Vec4f>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4F);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec4f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec4f> Attribute::Data::Builder::disownVec4f() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4F),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec4i() const {
  return which() == Attribute::Data::VEC4I;
}
inline bool Attribute::Data::Builder::isVec4i() {
  return which() == Attribute::Data::VEC4I;
}
inline bool Attribute::Data::Reader::hasVec4i() const {
  if (which() != Attribute::Data::VEC4I) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec4i() {
  if (which() != Attribute::Data::VEC4I) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec4i::Reader Attribute::Data::Reader::getVec4i() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4i>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec4i::Builder Attribute::Data::Builder::getVec4i() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4i>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec4i( ::fw::capnp::Vec4i::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4I);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec4i>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec4i::Builder Attribute::Data::Builder::initVec4i() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4I);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4i>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec4i(
    ::capnp::Orphan< ::fw::capnp::Vec4i>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4I);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec4i>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec4i> Attribute::Data::Builder::disownVec4i() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4I),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4i>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isVec4u() const {
  return which() == Attribute::Data::VEC4U;
}
inline bool Attribute::Data::Builder::isVec4u() {
  return which() == Attribute::Data::VEC4U;
}
inline bool Attribute::Data::Reader::hasVec4u() const {
  if (which() != Attribute::Data::VEC4U) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Attribute::Data::Builder::hasVec4u() {
  if (which() != Attribute::Data::VEC4U) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec4u::Reader Attribute::Data::Reader::getVec4u() const {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4u>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec4u::Builder Attribute::Data::Builder::getVec4u() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4u>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::setVec4u( ::fw::capnp::Vec4u::Reader value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4U);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec4u>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec4u::Builder Attribute::Data::Builder::initVec4u() {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4U);
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4u>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Data::Builder::adoptVec4u(
    ::capnp::Orphan< ::fw::capnp::Vec4u>&& value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::VEC4U);
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec4u>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec4u> Attribute::Data::Builder::disownVec4u() {
  KJ_IREQUIRE((which() == Attribute::Data::VEC4U),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec4u>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Data::Reader::isBool() const {
  return which() == Attribute::Data::BOOL;
}
inline bool Attribute::Data::Builder::isBool() {
  return which() == Attribute::Data::BOOL;
}
inline bool Attribute::Data::Reader::getBool() const {
  KJ_IREQUIRE((which() == Attribute::Data::BOOL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Attribute::Data::Builder::getBool() {
  KJ_IREQUIRE((which() == Attribute::Data::BOOL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Attribute::Data::Builder::setBool(bool value) {
  _builder.setDataField<Attribute::Data::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Attribute::Data::BOOL);
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Material::Reader::hasAttributes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Material::Builder::hasAttributes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>::Reader Material::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>::Builder Material::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Material::Builder::setAttributes( ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>::Builder Material::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Material::Builder::adoptAttributes(
    ::capnp::Orphan< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>> Material::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fw::capnp::Attribute,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Material::Reader::hasShaderRef() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Material::Builder::hasShaderRef() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Material::Reader::getShaderRef() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Material::Builder::getShaderRef() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Material::Builder::setShaderRef( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Material::Builder::initShaderRef(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Material::Builder::adoptShaderRef(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Material::Builder::disownShaderRef() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

