// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: image.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "vector.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(99493c8593497f2c);
CAPNP_DECLARE_SCHEMA(ce0031a1836c83f5);
enum class ColorFormat_ce0031a1836c83f5: uint16_t {
  FORMAT_R,
  FORMAT_RG,
  FORMAT_RGB,
  FORMAT_RGBA,
  FORMAT_SRGB,
  FORMAT_SRGBA,
};
CAPNP_DECLARE_ENUM(ColorFormat, ce0031a1836c83f5);
CAPNP_DECLARE_SCHEMA(b7c399a7cbffe56a);
enum class Compression_b7c399a7cbffe56a: uint16_t {
  COMP_NONE,
  COMP_ZSTD,
};
CAPNP_DECLARE_ENUM(Compression, b7c399a7cbffe56a);

}  // namespace schemas
}  // namespace capnp

namespace fw {
namespace capnp {

struct Image {
  Image() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ColorFormat_ce0031a1836c83f5 ColorFormat;

  typedef ::capnp::schemas::Compression_b7c399a7cbffe56a Compression;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(99493c8593497f2c, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Image::Reader {
public:
  typedef Image Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSize() const;
  inline  ::fw::capnp::Vec2u::Reader getSize() const;

  inline bool hasCompressedData() const;
  inline  ::capnp::Data::Reader getCompressedData() const;

  inline  ::fw::capnp::Image::ColorFormat getColorFormat() const;

  inline  ::fw::capnp::Image::Compression getCompression() const;

  inline bool hasCompressedDataDict() const;
  inline  ::capnp::Data::Reader getCompressedDataDict() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Image::Builder {
public:
  typedef Image Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSize();
  inline  ::fw::capnp::Vec2u::Builder getSize();
  inline void setSize( ::fw::capnp::Vec2u::Reader value);
  inline  ::fw::capnp::Vec2u::Builder initSize();
  inline void adoptSize(::capnp::Orphan< ::fw::capnp::Vec2u>&& value);
  inline ::capnp::Orphan< ::fw::capnp::Vec2u> disownSize();

  inline bool hasCompressedData();
  inline  ::capnp::Data::Builder getCompressedData();
  inline void setCompressedData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initCompressedData(unsigned int size);
  inline void adoptCompressedData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownCompressedData();

  inline  ::fw::capnp::Image::ColorFormat getColorFormat();
  inline void setColorFormat( ::fw::capnp::Image::ColorFormat value);

  inline  ::fw::capnp::Image::Compression getCompression();
  inline void setCompression( ::fw::capnp::Image::Compression value);

  inline bool hasCompressedDataDict();
  inline  ::capnp::Data::Builder getCompressedDataDict();
  inline void setCompressedDataDict( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initCompressedDataDict(unsigned int size);
  inline void adoptCompressedDataDict(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownCompressedDataDict();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Image::Pipeline {
public:
  typedef Image Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fw::capnp::Vec2u::Pipeline getSize();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Image::Reader::hasSize() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Image::Builder::hasSize() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fw::capnp::Vec2u::Reader Image::Reader::getSize() const {
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fw::capnp::Vec2u::Builder Image::Builder::getSize() {
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fw::capnp::Vec2u::Pipeline Image::Pipeline::getSize() {
  return  ::fw::capnp::Vec2u::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Image::Builder::setSize( ::fw::capnp::Vec2u::Reader value) {
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fw::capnp::Vec2u::Builder Image::Builder::initSize() {
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Image::Builder::adoptSize(
    ::capnp::Orphan< ::fw::capnp::Vec2u>&& value) {
  ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fw::capnp::Vec2u> Image::Builder::disownSize() {
  return ::capnp::_::PointerHelpers< ::fw::capnp::Vec2u>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Image::Reader::hasCompressedData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Image::Builder::hasCompressedData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Image::Reader::getCompressedData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Image::Builder::getCompressedData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Image::Builder::setCompressedData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Image::Builder::initCompressedData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Image::Builder::adoptCompressedData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Image::Builder::disownCompressedData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::fw::capnp::Image::ColorFormat Image::Reader::getColorFormat() const {
  return _reader.getDataField< ::fw::capnp::Image::ColorFormat>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::fw::capnp::Image::ColorFormat Image::Builder::getColorFormat() {
  return _builder.getDataField< ::fw::capnp::Image::ColorFormat>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Image::Builder::setColorFormat( ::fw::capnp::Image::ColorFormat value) {
  _builder.setDataField< ::fw::capnp::Image::ColorFormat>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::fw::capnp::Image::Compression Image::Reader::getCompression() const {
  return _reader.getDataField< ::fw::capnp::Image::Compression>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::fw::capnp::Image::Compression Image::Builder::getCompression() {
  return _builder.getDataField< ::fw::capnp::Image::Compression>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Image::Builder::setCompression( ::fw::capnp::Image::Compression value) {
  _builder.setDataField< ::fw::capnp::Image::Compression>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Image::Reader::hasCompressedDataDict() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Image::Builder::hasCompressedDataDict() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Image::Reader::getCompressedDataDict() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Image::Builder::getCompressedDataDict() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Image::Builder::setCompressedDataDict( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Image::Builder::initCompressedDataDict(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Image::Builder::adoptCompressedDataDict(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Image::Builder::disownCompressedDataDict() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

